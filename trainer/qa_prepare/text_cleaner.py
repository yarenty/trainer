"""
Text cleaning utilities for processing documentation and code files.
"""

import re
import logging
from typing import List


class TextCleaner:
    """Handles cleaning and preprocessing of text content."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def clean_text(self, text: str) -> str:
        """
        Clean and normalize text content.
        
        Args:
            text: Raw text content
            
        Returns:
            Cleaned text content
        """
        if not text:
            return ""
        
        # Remove excessive whitespace
        text = re.sub(r'\s+', ' ', text)
        
        # Remove common markdown artifacts
        text = re.sub(r'#{1,6}\s+', '', text)  # Remove markdown headers
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # Remove bold
        text = re.sub(r'\*(.*?)\*', r'\1', text)  # Remove italic
        text = re.sub(r'`(.*?)`', r'\1', text)  # Remove inline code
        
        # Remove URLs
        text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)
        
        # Remove email addresses
        text = re.sub(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', '', text)
        
        # Remove special characters that might interfere with processing
        text = re.sub(r'[^\w\s\.\,\;\:\!\?\-\(\)\[\]\{\}]', '', text)
        
        # Normalize whitespace
        text = ' '.join(text.split())
        
        return text.strip()
    
    def clean_code_text(self, text: str) -> str:
        """
        Clean code-specific text while preserving important structure.
        
        Args:
            text: Raw code text
            
        Returns:
            Cleaned code text
        """
        if not text:
            return ""
        
        # Remove comments but keep code structure
        lines = text.split('\n')
        cleaned_lines = []
        
        for line in lines:
            # Skip empty lines and comment-only lines
            stripped = line.strip()
            if not stripped or stripped.startswith('//') or stripped.startswith('#'):
                continue
            
            # Remove inline comments
            if '//' in line:
                line = line.split('//')[0]
            if '#' in line:
                line = line.split('#')[0]
            
            if line.strip():
                cleaned_lines.append(line)
        
        return '\n'.join(cleaned_lines)
    
    def remove_boilerplate(self, text: str) -> str:
        """
        Remove common boilerplate text that doesn't add value.
        
        Args:
            text: Text content
            
        Returns:
            Text with boilerplate removed
        """
        # Common boilerplate patterns
        boilerplate_patterns = [
            r'Copyright.*?All rights reserved\.',
            r'Licensed under.*?License\.',
            r'This file is part of.*?',
            r'Generated by.*?',
            r'DO NOT EDIT.*?',
        ]
        
        for pattern in boilerplate_patterns:
            text = re.sub(pattern, '', text, flags=re.IGNORECASE | re.DOTALL)
        
        return text.strip() 